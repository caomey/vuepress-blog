(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{507:function(t,s,a){"use strict";a.r(s);var n=a(59),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"作用域和作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域和作用域链"}},[t._v("#")]),t._v(" 作用域和作用域链")]),t._v(" "),a("h2",{attrs:{id:"go：global-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go：global-object"}},[t._v("#")]),t._v(" GO：Global Object")]),t._v(" "),a("p",[t._v("全局对象：全局属性和全局方法")]),t._v(" "),a("p",[t._v("this     window，\nwindow\tobject，\ndocument\tobject，\nglob \t100，\na\tfunction")]),t._v(" "),a("p",[a("strong",[t._v("defined")]),t._v("全局函数定义时，继承GO全局对象的属性和方法，内部函数(下一级作用域函数)定义时，继承父级的GO和AO")]),t._v(" "),a("h2",{attrs:{id:"执行期上下文-ao：activation-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行期上下文-ao：activation-object"}},[t._v("#")]),t._v(" 执行期上下文 AO：Activation Object")]),t._v(" "),a("p",[t._v("自己执行时的对象属性和方法")]),t._v(" "),a("p",[t._v("this\twindow,\narguments\t[],\na\t\t\t123,\nb\t\t\tfunction,")]),t._v(" "),a("p",[a("strong",[t._v("defined")]),t._v("  函数定义时，继承上一级作用域的AO和GO\n"),a("strong",[t._v("doing")]),t._v("   函数执行时，连接属于自己的AO\n"),a("strong",[t._v("done")]),t._v("   函数执行结束后断开自己的AO，不断开其他子函数得到的自己的AO")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("函数4  AO\t\t栈4\n函数3  AO\t\t栈3\n函数2  AO\t\t栈2\n函数1  AO\t\t栈1\n       GO\t  栈0\n")])])]),a("p",[t._v("a.[[scope]]  函数a的隐藏属性，可以理解成一个链表，一个栈，用来存储执期上下文")]),t._v(" "),a("p",[t._v("上级函数执行时和下级函数定义时的链表内容是一样的，继承的方法属性都一样\n程序要读到子函数的前提必须要父函数执行")]),t._v(" "),a("p",[a("strong",[t._v("作用域链")]),t._v("中外部函数不能访问内部函数变量，内部函数可以访问外部函数的变量")]),t._v(" "),a("h2",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("p",[a("strong",[t._v("运行期上下文")]),t._v("：当函数执行时，会创建一个称为"),a("strong",[t._v("执行期上下文")]),t._v("的内部对象。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，函数每次执行时，都会把新生成的执行期上下文，填充到作用域链的最顶端。当函数执行完毕，它所产生的执行上下文被销毁。")]),t._v(" "),a("p",[a("strong",[t._v("查找变量")]),t._v("：从作用域链的顶端依次向下查找。")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"作用域-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域-2"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("全局作用域,全局作用域中的变量,叫做全局变量")])]),t._v(" "),a("li",[a("p",[t._v("局部作用域,局部作用域中的变量,叫做局部变量")])]),t._v(" "),a("li",[a("p",[t._v("局部作用局可以使用全局作用域的变量(函数内部可以使用函数外部的变量,"),a("strong",[t._v("变量提升")]),t._v(")")])]),t._v(" "),a("li",[a("p",[t._v("函数外部不能使用函数内部的变量")])]),t._v(" "),a("li",[a("p",[t._v("函数中定义的变量"),a("strong",[t._v("没有使用var")]),t._v(",相当于在函数外部声明了全局变量,在函数内部进行的赋值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100")]),t._v("\n")])])]),a("hr"),t._v(" "),a("p",[t._v("调用一次函数,产生一个执行期上下文,加上全局执行上下文(window),执行上下文栈个数为 n+1")])]),t._v(" "),a("li",[a("p",[t._v("在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象")])]),t._v(" "),a("li",[a("p",[t._v("在全局执行上下文（window）确定后，将其添加到栈中（压栈）")])]),t._v(" "),a("li",[a("p",[t._v("在函数执行上下文"),a("strong",[t._v("创建")]),t._v("后，将其添加到栈中（压栈）")])]),t._v(" "),a("li",[a("p",[t._v("在当前函数"),a("strong",[t._v("执行完")]),t._v("后，将栈顶的对象移除（出栈）")])]),t._v(" "),a("li",[a("p",[t._v("当所有的代码执行完后，栈中只剩下window")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.进入全局执行上下文")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 进入foo执行上下文")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 进入bar函数执行上下文")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);