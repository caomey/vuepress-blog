(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{524:function(t,a,s){"use strict";s.r(a);var e=s(59),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"ajax、axios、fetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax、axios、fetch"}},[t._v("#")]),t._v(" Ajax、Axios、fetch")]),t._v(" "),s("h2",{attrs:{id:"ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[t._v("#")]),t._v(" Ajax")]),t._v(" "),s("h3",{attrs:{id:"什么是ajax（无刷新数据读取）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是ajax（无刷新数据读取）"}},[t._v("#")]),t._v(" 什么是Ajax（无刷新数据读取）")]),t._v(" "),s("p",[t._v("Ajax 提供了一种方式，让你无需刷新页面就可以异步获取数据")]),t._v(" "),s("p",[t._v("Ajax 的核心就是 浏览器提供的XHR(XMLHttpRequest) 对象")]),t._v(" "),s("p",[t._v("原理：ajax库是对XMLHTTPRequest对象的一种封装,是XMLHTTPRequest的一个实例")]),t._v(" "),s("h3",{attrs:{id:"ajax的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax的缺点"}},[t._v("#")]),t._v(" ajax的缺点")]),t._v(" "),s("p",[t._v("传统 Ajax 指的是 XMLHttpRequest（XHR）， 最早出现的发送后端请求技术，隶属于原始js中，核心使用XMLHttpRequest对象，多个请求之间如果有先后关系的话，就会出现"),s("strong",[t._v("回调地狱")]),t._v("。\nJQuery ajax 是对原生XHR的封装，除此以外还增添了对"),s("strong",[t._v("JSONP")]),t._v("的支持。经过多年的更新维护，真的已经是非常的方便了，优点无需多言；如果是硬要举出几个缺点，那可能只有：\n1.本身是针对MVC的编程,不符合现在前端"),s("strong",[t._v("MVVM")]),t._v("的浪潮\n2.基于原生的XHR开发，XHR本身的架构不清晰。\n3.JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）\n4.不符合关注分离（Separation of Concerns）的原则\n5.配置和调用方式非常混乱，而且基于事件的异步模型不友好。")]),t._v(" "),s("h3",{attrs:{id:"jquery-中的-ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jquery-中的-ajax"}},[t._v("#")]),t._v(" jQuery 中的 AJAX")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$.ajax({\n  url: '/time',\n  type: 'get',\n  dataType: 'json',\n  data: { id: 1 },\n  success: function (data) {\n    console.log(data)\n  },\n  error: function (xhr) {\n    console.log(xhr)\n  },\n})\n")])])]),s("p",[t._v("常用选项参数介绍：")]),t._v(" "),s("ul",[s("li",[t._v("url：请求地址")]),t._v(" "),s("li",[t._v("type：请求方法，默认为 "),s("code",[t._v("get")])]),t._v(" "),s("li",[t._v("dataType：服务端响应数据类型")]),t._v(" "),s("li",[t._v("contentType：请求体内容类型，默认 "),s("code",[t._v("application/x-www-form-urlencoded")])]),t._v(" "),s("li",[t._v("data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递")]),t._v(" "),s("li",[t._v("timeout：请求超时时间")]),t._v(" "),s("li",[t._v("beforeSend：请求发起之前触发")]),t._v(" "),s("li",[t._v("success：请求成功之后触发（响应状态码 200）")]),t._v(" "),s("li",[t._v("error：请求失败触发")]),t._v(" "),s("li",[t._v("complete：请求完成触发（不管成功与否）")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"axios"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#axios"}},[t._v("#")]),t._v(" Axios")]),t._v(" "),s("p",[t._v("axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，它本身具有以下特征：\n　　1.从浏览器中创建 XMLHttpRequest\n　　2.支持 Promise API\n　　3.客户端支持防止CSRF(cross-site request forgery)\n　　4.提供了一些并发请求的接口（重要，方便了很多的操作）\n　　5.从 node.js 创建 http 请求\n　　6.拦截请求和响应\n　　7.转换请求和响应数据\n　　8.取消请求\n　　9.自动转换JSON数据")]),t._v(" "),s("p",[s("strong",[t._v("axios既提供了并发的封装，也没有fetch的各种问题，而且体积也较小，当之无愧现在最应该选用的请求的方式。")])]),t._v(" "),s("h3",{attrs:{id:"get方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get方法"}},[t._v("#")]),t._v(" GET方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo/url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    params"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Henry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        phone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13333333")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"delete方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete方法"}},[t._v("#")]),t._v(" DELETE方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo/url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Henry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        phone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13333333")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"post方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#post方法"}},[t._v("#")]),t._v(" POST方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo/url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Henry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    phone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13333333")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"put方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#put方法"}},[t._v("#")]),t._v(" PUT方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo/url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Henry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    phone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13333333")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"patch方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#patch方法"}},[t._v("#")]),t._v(" PATCH方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo/url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Henry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    phone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13333333")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"fetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fetch"}},[t._v("#")]),t._v(" Fetch")]),t._v(" "),s("p",[s("strong",[t._v("fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象")]),t._v("。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多了，参数有点像jQuery ajax。但是，一定记住fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\nfetch的优点：\n1.符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里\n2.更好更方便的写法,fetch的优势主要优势就是：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n1.  语法简洁，更加语义化\n2.  基于标准 Promise 实现，支持 async/await\n3.  同构方便，使用 [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch)\n4.fetch请求默认是不带cookie的，需要设置fetch（URL，{credentials:’include’})。\n5.更加底层，提供的API丰富（request, response）\n6.脱离了XHR，是ES规范里新的实现方式\n7.fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n1）fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n2）fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n3）fetch没有办法原生监测请求的进度，而XHR可以\n")])])]),s("h3",{attrs:{id:"_1-get请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-get请求"}},[t._v("#")]),t._v(" 1.GET请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('fetch(url)\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(e => console.log("Oops, error", e))\n')])])]),s("ul",[s("li",[t._v("response.arrayBuffer()")]),t._v(" "),s("li",[t._v("response.blob()")]),t._v(" "),s("li",[t._v("response.formData()")]),t._v(" "),s("li",[t._v("response.json()")]),t._v(" "),s("li",[t._v("response.text()")])]),t._v(" "),s("h3",{attrs:{id:"_2-post请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-post请求"}},[t._v("#")]),t._v(" 2.post请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fetch(url,{\n            method:'POST',\n            headers:{\n                'Content-type':'application/json'// 设置请求头数据类型\n            },\n            body:data\n        })\n        .then(res=>res.json())\n        .then(data=>console.log(data))\n")])])]),s("h3",{attrs:{id:"_3-put请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-put请求"}},[t._v("#")]),t._v(" 3.put请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fetch(url,{\n            method:'PUT',\n            headers:{\n                'Content-type':'application/json'// 设置请求头数据类型\n            },\n            body:data\n        })\n        .then(res=>res.json())\n        .then(data=>console.log(data))\n")])])]),s("h3",{attrs:{id:"_3-delete请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-delete请求"}},[t._v("#")]),t._v(" 3.delete请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fetch(url,{\n            method:'DELETE',\n            headers:{\n                'Content-type':'application/json'// 设置请求头数据类型\n            },\n            body:data\n        })\n        .then(res=>res.json())\n        .then(data=>console.log(data))\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);