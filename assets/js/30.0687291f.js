(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{469:function(a,s,t){"use strict";t.r(s);var e=t(59),_=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"常见编程命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见编程命名规范"}},[a._v("#")]),a._v(" 常见编程命名规范")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("驼峰")]),a._v("命名法(camelCase，小驼峰)：面向对象语言(如Java、C#)变量、方法常用")]),a._v(" "),t("li",[t("strong",[a._v("帕斯卡")]),a._v("命名法(CamelCase，大驼峰)：常被面向对象语言(如Java、C#)类名常用")]),a._v(" "),t("li",[t("strong",[a._v("下划线")]),a._v("命名法(under_score_case)： 全大写常用于常量")]),a._v(" "),t("li",[t("strong",[a._v("短横线")]),a._v("命名法(kebab-case)：常用于包名称,项目的各个模块的命名")])]),a._v(" "),t("h2",{attrs:{id:"代码命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码命名规范"}},[a._v("#")]),a._v(" 代码命名规范")]),a._v(" "),t("h3",{attrs:{id:"_1-驼峰命名法（camelcase）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-驼峰命名法（camelcase）"}},[a._v("#")]),a._v(" 1. 驼峰命名法（CamelCase）")]),a._v(" "),t("p",[a._v("骆驼式命名法（Camel-Case）又称驼峰式命名法，是电脑程式编写时的一套命名规则（惯例）。正如它的名称CamelCase所表示的那样，是指混合使用大小写字母来构成变量和函数的名字。程序员们为了自己的代码能更容易的在同行之间交流，所以多采取统一的可读性比较好的命名方式。")]),a._v(" "),t("p",[a._v("它又可以分为以下几种。")]),a._v(" "),t("h4",{attrs:{id:"_1-小驼峰命名法（lowercamelcase）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-小驼峰命名法（lowercamelcase）"}},[a._v("#")]),a._v(" (1) 小驼峰命名法（lowerCamelCase）")]),a._v(" "),t("p",[a._v("除第一个单词之外，其他单词首字母大写。"),t("strong",[a._v("方法名、参数名、成员变量、局部变量需要使用小驼峰命名法（lowerCamelCase）")]),a._v("。比如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getUserInfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createCustomThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findAllByUserName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" userName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TaskRepository")]),a._v(" taskRepository"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h4",{attrs:{id:"_2-大驼峰命名法（camelcase）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-大驼峰命名法（camelcase）"}},[a._v("#")]),a._v(" (2) 大驼峰命名法（CamelCase）")]),a._v(" "),t("p",[a._v("相比小驼峰法，大驼峰法（即帕斯卡命名法）把第一个单词的首字母也大写了。"),t("strong",[a._v("常用于类名，命名空间等")]),a._v("。如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TaskDateToSend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TaskLabelToSend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SettingRepository")]),a._v("\n")])])]),t("h3",{attrs:{id:"_2-蛇形命名法（snake-case）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-蛇形命名法（snake-case）"}},[a._v("#")]),a._v(" 2. 蛇形命名法（snake_case）")]),a._v(" "),t("p",[a._v("蛇形法是全由小写字母和下划线组成，在两个单词之间用下滑线连接即可。"),t("strong",[a._v("测试方法名、常量、枚举名称需要使用蛇形命名法（snake_case）")]),a._v("。如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("first_name\nlast_name\nMAX_ITERATION\nLAST_DATA\n")])])]),t("h3",{attrs:{id:"_3-串式命名法（kebab-case）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-串式命名法（kebab-case）"}},[a._v("#")]),a._v(" 3. 串式命名法（kebab-case）")]),a._v(" "),t("p",[a._v("在串式命名法中，各个单词之间通过下划线“-”连接，比如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("hello"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("world\nfirst"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("project\n")])])]),t("p",[a._v("建议项目文件夹名称使用串式命名法（kebab-case），比如 dubbo 项目的各个模块的命名是下面这样的：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/10386940-56347b0becdadaa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/628/format/webp",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"语言场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语言场景"}},[a._v("#")]),a._v(" 语言场景")]),a._v(" "),t("p",[a._v("给出各个场景下的命名规则，大家要养成习惯。事实上，如果经常在各个语言上切换的话，真的可能搞混。所以今天就Mark一下吧。")]),a._v(" "),t("h3",{attrs:{id:"java命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java命名规范"}},[a._v("#")]),a._v(" Java命名规范")]),a._v(" "),t("h4",{attrs:{id:"总体命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总体命名规范"}},[a._v("#")]),a._v(" 总体命名规范")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("类名")]),a._v("需要使用大驼峰命名法（UpperCamelCase）风格。")]),a._v(" "),t("li",[t("strong",[a._v("方法名、参数名、成员变量、局部变量")]),a._v("需要使用小驼峰命名法（lowerCamelCase）。")]),a._v(" "),t("li",[t("strong",[a._v("测试方法名、常量、枚举名称")]),a._v("需要使用蛇形命名法（snake_case） ，比如test_get_user()、TIME_LIMIT。并且，测试方法名称要求全部小写，"),t("strong",[a._v("常量")]),a._v("以及"),t("strong",[a._v("枚举名称")]),a._v("需要全部大写。")]),a._v(" "),t("li",[t("strong",[a._v("项目文件夹名称")]),a._v("使用串式命名法（kebab-case），比如dubbo-registry。")]),a._v(" "),t("li",[t("strong",[a._v("包名")]),a._v('统一使用小写，尽量使用单个名词作为包名，各个单词通过 "." 分隔符连接，并且各个单词必须为单数。')]),a._v(" "),t("li",[t("strong",[a._v("抽象类")]),a._v("命名使用 Abstract 开头。如：public abstract class AbstractClient extends AbstractEndpoint{}。")]),a._v(" "),t("li",[t("strong",[a._v("异常类")]),a._v("命名使用 Exception 结尾。如：public class NoSuchMethodException extends RuntimeException{}。")]),a._v(" "),t("li",[t("strong",[a._v("测试类")]),a._v("命名以它要测试的类的名称开始，以 Test 结尾。如：public class AnnotationUtilsTest{}。")])]),a._v(" "),t("h4",{attrs:{id:"包名命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包名命名规范"}},[a._v("#")]),a._v(" 包名命名规范")]),a._v(" "),t("p",[a._v("Java的包名由小写单词组成，包的路径符合所开发的系统模块的定义，以便通过包名可得知其属于哪个模块，从而方便到对应包里找相应的实现类。\n"),t("strong",[a._v("1. 常规包名")]),a._v("\n为了保障每个Java Package命名的唯一性,在Java编程规范中要求开发人员在自己定义的包名前加上唯一的前缀.由于互联网上的域名称是不会重复的,所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀.例如 : com.sun.swt...")]),a._v(" "),t("ul",[t("li",[a._v("公司项目\ncom : 公司项目,copyright由项目发起的公司所有.\n包名 : com.公司名.项目名.模块名..")]),a._v(" "),t("li",[a._v("团队项目\nteam : 团队项目,指由团队发起,并由该团队开发的项目,copyright属于该团队所有.\n包名 : team.团队名.项目名.模块名..")])]),a._v(" "),t("p",[t("strong",[a._v("2. 自定义包名")]),a._v("\n一般公司命名为com.公司名.项目名.模块名....那我们个人的项目又怎么命名呢?个人的英语单词有individual、personal、private、one-man,进一步对以上四个单词词意进行分析并在保证了唯一性,继而使用每个单词的前4个字母作为前缀,与com也做了区分.示例如下所示:")]),a._v(" "),t("ul",[t("li",[a._v("indi : 个体项目,指个人发起,但非自己独自完成的项目,可公开或私有项目,copyright主要属于发起者. 包名 :"),t("strong",[a._v("indi.发起者名.项目名.模块名..")])]),a._v(" "),t("li",[a._v("pers : 个人项目,指个人发起,独自完成,可分享的项目,copyright主要属于个人.包名 : "),t("strong",[a._v("pers.个人名.项目名.模块名..")])]),a._v(" "),t("li",[a._v("priv : 私有项目,指个人发起,独自完成,非公开的私人使用的项目,copyright属于个人.包名 : "),t("strong",[a._v("priv.个人名.项目名.模块名..")])]),a._v(" "),t("li",[a._v("onem : 与indi相同，推荐使用indi.")])]),a._v(" "),t("h3",{attrs:{id:"python命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python命名规范"}},[a._v("#")]),a._v(" Python命名规范")]),a._v(" "),t("p",[t("strong",[a._v("类")]),a._v("：总是使用首字母大写单词串。如MyClass、ClassName。内部类可以使用额外的前导下划线。")]),a._v(" "),t("p",[t("strong",[a._v("函数和方法")]),a._v("：小写+下划线，如method_name。")]),a._v(" "),t("p",[t("strong",[a._v("函数参数")]),a._v("：小写+下划线，如function_parameter_name。如果一个函数的参数名称和保留的关键字冲突，通常使用一个后缀下划线，如random_。")]),a._v(" "),t("p",[t("strong",[a._v("全局变量")]),a._v("：对于from M import *导入语句，如果想阻止导入模块内的全局变量可以使用旧有的规范，在全局变量上加一个前导的下划线，如_var_name。"),t("em",[a._v("应避免使用全局变量")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("变量")]),a._v("：小写，由下划线连接各个单词。如color、this_is_a_variable。\n"),t("em",[a._v("注意")]),a._v("：")]),a._v(" "),t("ol",[t("li",[a._v("不论是类成员变量还是全局变量，均不使用 m 或 g 前缀。")]),a._v(" "),t("li",[a._v("私有类成员使用单一下划线前缀标识。")]),a._v(" "),t("li",[a._v("变量名不应带有类型信息，因为Python是动态类型语言。如 iValue、names_list、dict_obj 等都是不好的命名。")])]),a._v(" "),t("p",[t("strong",[a._v("常量")]),a._v("：常量名所有字母大写，由下划线连接各个单词如MAX_OVERFLOW，TOTAL。")]),a._v(" "),t("p",[t("strong",[a._v("异常")]),a._v("：以“Error”作为后缀。")]),a._v(" "),t("p",[t("strong",[a._v("文件名")]),a._v("：全小写,可使用下划线")]),a._v(" "),t("p",[t("strong",[a._v("包")]),a._v("：应该是简短的、小写的名字。如果下划线可以改善可读性可以加入，如mypackage。")]),a._v(" "),t("p",[t("strong",[a._v("模块")]),a._v("：与包的规范同，如mymodule。")]),a._v(" "),t("p",[t("strong",[a._v("缩写")]),a._v("：命名应当尽量使用全拼写的单词，缩写的情况有如下两种：")]),a._v(" "),t("ol",[t("li",[a._v("常用的缩写，如XML、ID等，在命名时也应只大写首字母，如XmlParser。")]),a._v(" "),t("li",[a._v("命名中含有长单词，对某个单词进行缩写。这时应使用约定成俗的缩写方式。\n例如：\nfunction 缩写为 fn\ntext 缩写为 txt\nobject 缩写为 obj\ncount 缩写为 cnt\nnumber 缩写为 num，等。")])]),a._v(" "),t("p",[t("strong",[a._v("前导后缀下划线")]),a._v("：\n一个前导下划线：表示非公有。\n一个后缀下划线：避免关键字冲突。\n两个前导下划线：当命名一个类属性引起名称冲突时使用。\n两个前导和后缀下划线：“魔”（有特殊用图）对象或者属性，例如"),t("strong",[a._v("init")]),a._v("或者"),t("strong",[a._v("file")]),a._v("。绝对不要创造这样的名字，而只是使用它们。\n"),t("em",[a._v("注意")]),a._v("：关于下划线的使用存在一些争议。")]),a._v(" "),t("p",[t("strong",[a._v("特定命名方式")]),a._v("：主要是指 "),t("strong",[a._v("xxx")]),a._v(" 形式的系统保留字命名法。项目中也可以使用这种命名，它的意义在于这种形式的变量是只读的，这种形式的类成员函数尽量不要重载。如\nclass Base(object):\ndef "),t("strong",[a._v("init")]),a._v("(self, id, parent = None):\nself."),t("strong",[a._v("id")]),a._v(" = id\nself."),t("strong",[a._v("parent")]),a._v(" = parent\ndef "),t("strong",[a._v("message")]),a._v("(self, msgid):\n其中 "),t("strong",[a._v("id")]),a._v("、"),t("strong",[a._v("parent")]),a._v(" 和 "),t("strong",[a._v("message")]),a._v(" 都采用了系统保留字命名法。")]),a._v(" "),t("p",[a._v("Python推荐使用蛇形命名法，因为 Python 是蟒蛇啊，理所当然是用蛇形命名……")]),a._v(" "),t("p",[a._v("综合各方面考虑，驼峰式命名法比较好，优势明显，事实上，目前使用驼峰式命名法的人也真的越来越多了。")])])}),[],!1,null,null,null);s.default=_.exports}}]);